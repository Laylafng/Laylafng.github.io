<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>个人博客部署到服务器</title>
    <link href="/2023/11/19/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2023/11/19/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>博客是直接使用的hexo，在本地写好上传到服务区就可以通过公网ip访问，但是还没有做域名。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>服务器OS：Ubuntu20.04</li><li>客户端：Windows11</li><li>远程连接工具：MobaXterm</li></ul><h2 id="Ubuntu搭建git服务器"><a href="#Ubuntu搭建git服务器" class="headerlink" title="Ubuntu搭建git服务器"></a>Ubuntu搭建git服务器</h2><h3 id="创建git库"><a href="#创建git库" class="headerlink" title="创建git库"></a>创建git库</h3><ol><li><p>安装openssh<br>首先使用MobaXterm连接服务器，切换到root用户，回退根路径<br>我这里下载openssh的时候一直报错，但是已经连接到服务器了，所以应该是已经有ssh服务了，可以提前检查一下<br><img src="/2023/11/19/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/openssh.jpg"><br><img src="/2023/11/19/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/openssh-run.jpg"><br>(如果是新的系统，需要先更新一下之后下载)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br></code></pre></td></tr></table></figure></li><li><p>安装git<br>可以创建一个用户专门用于blog权限，但是我懒，这里直接使用root，所以之后的hexo的config文件中也是用的root</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install git-core<br></code></pre></td></tr></table></figure></li><li><p>创建仓库<br>回退到根路径之后在var&#x2F;repo下创建仓库(repo自己创建文件夹)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir /var/repo<br>sudo chown -R $USER:$USER /var/repo/ <br>sudo chmod -R 755 /var/repo/ cd /var/repo/ <br>git init --bare hexo-LaaLaa-Blog.git<br></code></pre></td></tr></table></figure><p>然后就可以看看创建之后里面有啥（看了也没用）<br><img src="/2023/11/19/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/hexogit.jpg"></p></li></ol><h3 id="配置Nginx托管文件目录"><a href="#配置Nginx托管文件目录" class="headerlink" title="配置Nginx托管文件目录"></a>配置Nginx托管文件目录</h3><ol><li><p>安装Nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install nginx -y   <br></code></pre></td></tr></table></figure></li><li><p>创建&#x2F;var&#x2F;www&#x2F;hexo目录，用于Nginx托管，修改目录的所有权和权限（如果不是root的话还是需要）；www目录已经存在，创建hexo就可以</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mkdir -p /var/www/hexo <br>sudo chown -R $USER:$USER /var/www/hexo <br>sudo chmod -R 755 /var/www/hexo<br></code></pre></td></tr></table></figure><ol start="3"><li>使用vim修改&#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;default，使root指向hexo目录<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vim /etc/nginx/sites-enabled/default<br></code></pre></td></tr></table></figure>找到server之后修改内容<br><img src="/2023/11/19/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/nginx.png"><br>(该步骤将Nginx服务的默认路径修改为指定目录hexo)<br>重启服务生效<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo service nginx restart<br></code></pre></td></tr></table></figure></li></ol><p>这个时候可以查看页面了,访问ip可以看到页面（没有内容）<br><img src="/2023/11/19/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/web.jpg"></p><p>(如果没有的话移步到服务器配置)</p><h3 id="创建git钩子"><a href="#创建git钩子" class="headerlink" title="创建git钩子"></a>创建git钩子</h3><ol><li><p>在之前创建的hexo-LaaLaa-Blog.git裸仓库下有一个hooks文件夹，在其中创建一个名为post-receive的钩子文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /var/repo/hexo_static.git/hooks/post-receive<br></code></pre></td></tr></table></figure><p>写入如下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span> <br>git --work-tree=/var/www/hexo --git-dir=/var/repo/hexo-LaaLaa-Blog.git checkout -f<br></code></pre></td></tr></table></figure></li><li><p>让该文件变为可执行文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x /var/repo/hexo-LaaLaa-Blog.git/hooks/post-receive<br></code></pre></td></tr></table></figure></li></ol><h3 id="Windows搭建客户端"><a href="#Windows搭建客户端" class="headerlink" title="Windows搭建客户端"></a>Windows搭建客户端</h3><p>因为我本地已经有一个了，就自己去找吧</p><h3 id="部署Hexo项目"><a href="#部署Hexo项目" class="headerlink" title="部署Hexo项目"></a>部署Hexo项目</h3><ol><li><p>编辑hexo的<code>_config.yml</code>文件，在<code>deploy</code>修改repo项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span> <br><span class="hljs-attr">type:</span> <span class="hljs-string">git</span> <br><span class="hljs-attr">repo:</span> &#123;<span class="hljs-string">用户（root）</span>&#125;<span class="hljs-string">@&#123;server_ip&#125;:/var/repo/hexo-LaaLaa-Blog.git</span> <br><span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>将 url 改成<code>https://&#123;云服务器IP&#125;/</code></p></li><li><p>在个人博客站点目录下，打开 Git bash ,使用 <code>hexo clean &amp;&amp; hexo g -d</code> 部署：会要求输入一次服务器登录用户的密码<br><img src="/2023/11/19/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/pwd.jpg"></p></li><li><p>然后就可以ip访问<br><img src="/2023/11/19/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/end.jpg"></p></li></ol><h3 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h3><p>如果部署到购买的云服务器（阿里云）上，可能出现访问服务器IP没有响应的情况</p><ol><li><p>进入服务器配置页面对安全组规则配置<br><img src="/2023/11/19/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/secure1.jpg"></p></li><li><p>点击<code>云服务器/ECS</code>，在<strong>安全组规则</strong>中手动添加一条80端口的规则：<br><img src="/2023/11/19/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/secure.jpg"></p></li></ol><p>(我整个过程还是很顺利滴，所以如果安装有问题，可以去找找其他教程哦！)</p><h2 id="后续部署在服务器上"><a href="#后续部署在服务器上" class="headerlink" title="后续部署在服务器上"></a>后续部署在服务器上</h2><p>因为之前被挖矿攻击过一次，所以修改了端口号hhhhhhh，然后就出现需要ssh重新连接的问题，我是在本机的.ssh中声明服务器上ssh的密钥和ssh服务的端口<br>在hexo的deploy中直接使用Host就可以，但是好像前面需要加一个ssh:&#x2F;&#x2F;</p><ol><li>这个是我本机的.ssh文件夹，为了避免混淆，我新建了一个aliyun_hexo的文件夹，新建一个存放密钥的文件之后，去配置config<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">Host aliyun_hexo<br>HostName XXX<br>Port XXX<br><span class="hljs-keyword">User</span> <span class="hljs-title">root</span><br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/aliyun_rsa/aliyun_id_rsa<br></code></pre></td></tr></table></figure></li></ol><p>2.再去配置hexo的config文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">deploy:<br>  type: <span class="hljs-string">&#x27;git&#x27;</span><br>  repo: ssh:<span class="hljs-regexp">//</span>root@aliyun_hexo<span class="hljs-regexp">/xxx/</span>xxx/xxx.git<br></code></pre></td></tr></table></figure><p>大功告成，这次再被攻击，我就生气啦</p>]]></content>
    
    
    <categories>
      
      <category>搭建教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vuedraggable——vue拖拽组件</title>
    <link href="/2023/11/04/vuedraggable%E2%80%94%E2%80%94vue%E6%8B%96%E6%8B%BD%E7%BB%84%E4%BB%B6/"/>
    <url>/2023/11/04/vuedraggable%E2%80%94%E2%80%94vue%E6%8B%96%E6%8B%BD%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>属于是一个惊喜的组件——主要用于<strong>vue中针对数据绑定的list数组</strong>进行一个排序</p><h1 id="vuedraggable"><a href="#vuedraggable" class="headerlink" title="vuedraggable"></a>vuedraggable</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>官方：<a href="https://github.com/SortableJS/vue.draggable.next">https://github.com/SortableJS/vue.draggable.next</a><br>中文文档：<a href="https://debug.itxst.com/js/ivv3eivm">https://debug.itxst.com/js/ivv3eivm</a><br>注意下载的vue的版本，vue2和vue3使用的库和方式都不一样(<strong>这里使用的vue2</strong>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs node">cnpm install vuedraggable@2.24.0<br></code></pre></td></tr></table></figure><h2 id="常见使用参数的含义"><a href="#常见使用参数的含义" class="headerlink" title="常见使用参数的含义"></a>常见使用参数的含义</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;draggable v-model=&quot;modal.trades&quot; handle=&quot;.mover&quot; :scroll=&quot;true&quot; animation=&quot;400&quot; :group=&quot;modal.modal&quot; @end=&quot;handleDragEnd(modal.trades)&quot;&gt;<br>&lt;transition-group&gt;<br>   &lt;div class=&quot;tradeItem&quot; :class=&quot;&#123;selected:trade===selectedTrade&#125;&quot; v-for=&quot;trade in modal.trades&quot; :key=&quot;trade.speech_id&quot;&gt;<br>      &lt;div style=&quot;display: flex;padding: 1px 0px 1px 0px;&quot;&gt;<br>  &lt;div class=&quot;mover&quot; :style=&quot;itemStyle(trade)&quot; @click=&quot;selectedTrade=trade&quot;&gt;<br>  &lt;/div&gt;<br>  &lt;div class=&quot;modal_scroll-bar&quot; :style=&quot;&#123;width:width+&#x27;px&#x27;&#125;&quot;&gt;<br>  &lt;/div&gt;<br>  &lt;div&gt;<br>    &lt;div&gt;<br>     &lt;/transition-group&gt;<br>&lt;/draggable&gt;<br></code></pre></td></tr></table></figure><ul><li>v-model：绑定需要for循环的列表</li><li>scroll：组件内部是否允许滚动操作</li><li>animation：定义在拖动过程中的过渡效果的持续时间</li><li>group：同一个group组之间内部的元素可以相互移动</li><li>handle：绑定拖动元素，<code>class=mover</code>的元素作为该item移动的标签，移动句柄</li></ul><p>使用元素标签<code>transition-group</code>可以实现内部元素在拖动时有动画效果</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>完整代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;draggable v-model=&quot;modal.trades&quot; handle=&quot;.mover&quot; :scroll=&quot;true&quot; animation=&quot;400&quot; :group=&quot;modal.modal&quot; @end=&quot;handleDragEnd(modal.trades)&quot;&gt;<br>&lt;transition-group&gt;<br>&lt;div class=&quot;tradeItem&quot; :class=&quot;&#123;selected:trade===selectedTrade&#125;&quot; v-for=&quot;trade in modal.trades&quot; :key=&quot;trade.speech_id&quot;&gt;<br>&lt;div style=&quot;display: flex;padding: 1px 0px 1px 0px;&quot;&gt;<br>&lt;div class=&quot;mover&quot; :style=&quot;itemStyle(trade)&quot; @click=&quot;selectedTrade=trade&quot;&gt;<br>&lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-circle-plus&quot; size=&quot;mini&quot; plain style=&quot;margin-top: 3px;&quot; @click=&quot;addSliderItem(trade)&quot;&gt;&lt;/el-button&gt;<br>&lt;/div&gt;<br>&lt;div class=&quot;modal_scroll-bar&quot; :style=&quot;&#123;width:width+&#x27;px&#x27;&#125;&quot;&gt;<br>&lt;div class=&quot;maxWidth&quot; :style=&quot;getSingleTradeStyle(trade)&quot; @mousewheel=&quot;handleMouseWheel&quot;&gt;<br>&lt;div class=&quot;sliders&quot; style=&quot;flex-grow: 1;position: relative;&quot;&gt;<br>&lt;div class=&quot;slider&quot; v-for=&quot;slider in trade.sliders&quot; :key=&quot;slider.id&quot; :style=&quot;getSingleSliderStyle(slider)&quot; @contextmenu.prevent=&quot;openMenu($event,slider,trade)&quot;&gt;<br>&lt;div class=&quot;left-bar&quot; @mousedown=&quot;changeSliderLeft(slider,trade,$event)&quot;&gt;&lt;/div&gt;<br>&lt;div class=&quot;right-bar&quot; @mousedown=&quot;changeSliderEnd(slider,trade,$event)&quot;&gt;&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;div class=&quot;divider&quot; v-if=&quot;modal.trades.indexOf(trade)!==modal.trades.length-1&quot; <br>@mousedown=&quot;adjustHighScale([trade],[modal.trades[modal.trades.indexOf(trade)+1]],$event)&quot;&gt;<br>&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/transition-group&gt;<br>&lt;/draggable&gt;<br></code></pre></td></tr></table></figure><p>也可以做成组件复用<br>但是需要注意版本，好像vue2和vue3的版本使用区别还是很大的</p>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>D3-document</title>
    <link href="/2023/10/22/D3-document/"/>
    <url>/2023/10/22/D3-document/</url>
    
    <content type="html"><![CDATA[<h1 id="操作教程"><a href="#操作教程" class="headerlink" title="操作教程"></a>操作教程</h1><h2 id="散点图中圆形节点内插图"><a href="#散点图中圆形节点内插图" class="headerlink" title="散点图中圆形节点内插图"></a>散点图中圆形节点内插图</h2><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>先给一个效果展示吧<br><img src="/2023/10/22/D3-document/1.jpg"><br>悬浮到圆点之后可以获得一个卷福</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>主要是使用d3中SVG 的 <code>pattern</code> 元素：<code>pattern</code> 元素可以定义一个可重复的图案，然后将其应用到其他元素的填充或描边属性中。</p><p>给一个代码展示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建一个 pattern 元素</span><br><span class="hljs-keyword">const</span> pattern = svg.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;defs&quot;</span>)<br>    .<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;pattern&quot;</span>)<br>    .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;circle-pattern&quot;</span>)<br>    .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;width&quot;</span>, <span class="hljs-number">1</span>)<br>    .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;height&quot;</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 向 pattern 中添加 image 元素</span><br>pattern.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;image&quot;</span>)<br>  .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;xlink:href&quot;</span>, <span class="hljs-string">&quot;path/to/your/image.jpg&quot;</span>) <span class="hljs-comment">// 替换为有效的图像链接</span><br>  .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">0</span>) <span class="hljs-comment">//相对上一级元素的左上角坐标</span><br>  .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-number">0</span>)<br>  .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;width&quot;</span>, imageRadius * <span class="hljs-number">2</span>)<br>  .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;height&quot;</span>, imageRadius * <span class="hljs-number">2</span>);<br><br><span class="hljs-comment">// 创建圆圈，并将 pattern 应用为填充</span><br>selectdot.<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;r&quot;</span>, imageRadius)<br>  .<span class="hljs-title function_">style</span>(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;url(#circle-pattern)&quot;</span>)<br>  .<span class="hljs-title function_">style</span>(<span class="hljs-string">&quot;opacity&quot;</span>, <span class="hljs-string">&quot;1.0&quot;</span>);<br></code></pre></td></tr></table></figure><p>其中获得图片在Vue中使用import导入图片</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> juanfu <span class="hljs-keyword">from</span> @/assets/image/juanfu.<span class="hljs-property">jpg</span><br><span class="hljs-comment">//@为src的路径，可以在vite.config.js中查看</span><br></code></pre></td></tr></table></figure><p>当然，可能还会出现针对不同结点需要导入相对应的图片，可以在<code>pattern</code>元素上绑定数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建一个 pattern 元素，并设置其id</span><br><span class="hljs-keyword">const</span> pattern = svg.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;defs&quot;</span>)<br>  .<span class="hljs-title function_">selectAll</span>(<span class="hljs-string">&quot;pattern&quot;</span>)<br>  .<span class="hljs-title function_">data</span>(data) <span class="hljs-comment">// 假设您的数据包含各个节点的信息</span><br>  .<span class="hljs-title function_">enter</span>()<br>  .<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;pattern&quot;</span>)<br>    .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-function">(<span class="hljs-params">d, i</span>) =&gt;</span> <span class="hljs-string">&quot;pattern-&quot;</span> + i)<br>    .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;width&quot;</span>, <span class="hljs-number">1</span>)<br>    .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;height&quot;</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 向每个 pattern 中添加 image 元素，并为每个节点指定不同的图像链接</span><br>pattern.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;image&quot;</span>)<br>  .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;xlink:href&quot;</span>, <span class="hljs-function">(<span class="hljs-params">d</span>) =&gt;</span> d.<span class="hljs-property">imageUrl</span>) <span class="hljs-comment">// 根据节点的数据设置图像链接</span><br>  .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">0</span>)<br>  .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-number">0</span>)<br>  .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;width&quot;</span>, imageRadius * <span class="hljs-number">2</span>)<br>  .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;height&quot;</span>, imageRadius * <span class="hljs-number">2</span>);<br><br><span class="hljs-comment">// 创建圆圈，并为每个节点应用不同的图案填充</span><br><span class="hljs-keyword">const</span> circles = svg.<span class="hljs-title function_">selectAll</span>(<span class="hljs-string">&quot;circle&quot;</span>)<br>  .<span class="hljs-title function_">data</span>(data) <span class="hljs-comment">// 假设您的数据包含各个节点的信息</span><br>  .<span class="hljs-title function_">enter</span>()<br>  .<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;circle&quot;</span>)<br>    .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;r&quot;</span>, imageRadius)<br>    .<span class="hljs-title function_">style</span>(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-function">(<span class="hljs-params">d, i</span>) =&gt;</span> <span class="hljs-string">&quot;url(#pattern-&quot;</span> + i + <span class="hljs-string">&quot;)&quot;</span>)<br>    .<span class="hljs-title function_">style</span>(<span class="hljs-string">&quot;opacity&quot;</span>, <span class="hljs-string">&quot;1.0&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="效果中还出现的其他操作代码"><a href="#效果中还出现的其他操作代码" class="headerlink" title="效果中还出现的其他操作代码"></a>效果中还出现的其他操作代码</h4><p>比如对于卷福图片描边</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">.<span class="hljs-title function_">style</span>(<span class="hljs-string">&quot;stroke&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="没有悬停事件时缩放会更新，但是悬停事件完成之后再缩放，之前发生悬停事件的圆点就不会随着缩放变化了"><a href="#没有悬停事件时缩放会更新，但是悬停事件完成之后再缩放，之前发生悬停事件的圆点就不会随着缩放变化了" class="headerlink" title="没有悬停事件时缩放会更新，但是悬停事件完成之后再缩放，之前发生悬停事件的圆点就不会随着缩放变化了"></a>没有悬停事件时缩放会更新，但是悬停事件完成之后再缩放，之前发生悬停事件的圆点就不会随着缩放变化了</h2><p>问题主要是因为悬停事件操作和缩放事件操作的属性不一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">selectdot.<span class="hljs-title function_">style</span>(<span class="hljs-string">&quot;r&quot;</span>, currentRadius)<br><span class="hljs-comment">// 这是悬停事件对于r的操作</span><br>dots.<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;cx&quot;</span>, <span class="hljs-function"><span class="hljs-params">d</span> =&gt;</span> <span class="hljs-title function_">newX</span>(d[<span class="hljs-number">0</span>])).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;cy&quot;</span>, <span class="hljs-function"><span class="hljs-params">d</span> =&gt;</span> <span class="hljs-title function_">newY</span>(d[<span class="hljs-number">1</span>])).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;r&quot;</span>, initialRadius * newScale&gt;maxRadius?<span class="hljs-attr">maxRadius</span>:initialRadius * newScale);<br><span class="hljs-comment">// 这是缩放更新代码</span><br></code></pre></td></tr></table></figure><p>两者对于r的更新属性不一样，所以不统一，要更新为一样的再操作。</p>]]></content>
    
    
    <categories>
      
      <category>d3文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>d3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue😒😒</title>
    <link href="/2023/10/12/Vue%F0%9F%98%92%F0%9F%98%92/"/>
    <url>/2023/10/12/Vue%F0%9F%98%92%F0%9F%98%92/</url>
    
    <content type="html"><![CDATA[<h1 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h1><h2 id="router"><a href="#router" class="headerlink" title="router"></a>router</h2><p>主要用于实现页面切换——Vue是SRA单页面应用，实际上浏览器只有一个页面，实现内部的组件不断更新达到切换页面的效果。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">this</span>.$router和<span class="hljs-keyword">this</span>.$route<br><span class="hljs-number">1.</span><span class="hljs-keyword">this</span>.$router<br>表示再main.js中挂在的router，一模一样，可以再所有组件中使用（切换组件操作）<br><br><span class="hljs-number">2.</span><span class="hljs-keyword">this</span>.$route<br>表示当前路由，首先要确保当前路由存在：也就是当前路由有对应的数据可以获取<br></code></pre></td></tr></table></figure><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>&#123; <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user&#x27;</span>, <br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;User&#x27;</span>, <br><span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../components/user.vue&#x27;</span>), <br><span class="hljs-attr">children</span>: [<br>&#123; <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;man&#x27;</span>, <br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Man&#x27;</span>, <br><span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../components/man.vue&#x27;</span>)<br>&#125;, <br>&#123; <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;woman&#x27;</span>, <br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;WoMan&#x27;</span>, <br><span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../components/woman.vue&#x27;</span>) <br>&#125;<br>] <br>&#125;]<br></code></pre></td></tr></table></figure><p> 不要忘记在嵌套路由的页面增加router-view</p>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅记一个路由跳转问题：vue-router</title>
    <link href="/2023/09/11/%E6%B5%85%E8%AE%B0%E4%B8%80%E4%B8%AA%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%E9%97%AE%E9%A2%98%EF%BC%9Avue-router/"/>
    <url>/2023/09/11/%E6%B5%85%E8%AE%B0%E4%B8%80%E4%B8%AA%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%E9%97%AE%E9%A2%98%EF%BC%9Avue-router/</url>
    
    <content type="html"><![CDATA[<h2 id="报错问题"><a href="#报错问题" class="headerlink" title="报错问题"></a>报错问题</h2><p>前端到底是谁在写呀！！！！！！！<br>问题就是说咱们这个路由跳转，一个组件映射到一个路径，然后执行跳转，啥事没有，但是出现的<strong>问题就是我从A-&gt;B，从B-&gt;A出问题了</strong>！</p><h3 id="路径变化了，但是页面没过去，刷新一下就有好！！！"><a href="#路径变化了，但是页面没过去，刷新一下就有好！！！" class="headerlink" title="路径变化了，但是页面没过去，刷新一下就有好！！！"></a><font color="#fa6069">路径变化了，但是页面没过去，刷新一下就有好！！！</font></h3><p>现在是在根路径下<br><img src="/./%E6%B5%85%E8%AE%B0%E4%B8%80%E4%B8%AA%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%E9%97%AE%E9%A2%98%EF%BC%9Avue-router/1.jpg"><br>上传文件路径后跳转播放<br><img src="/./%E6%B5%85%E8%AE%B0%E4%B8%80%E4%B8%AA%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%E9%97%AE%E9%A2%98%EF%BC%9Avue-router/2.jpg"><br>最后结束返回&#x2F;根路径就 回不去了（！！！！）<br><img src="/./%E6%B5%85%E8%AE%B0%E4%B8%80%E4%B8%AA%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%E9%97%AE%E9%A2%98%EF%BC%9Avue-router/3.jpg"></p><h3 id="稀里糊涂的解决"><a href="#稀里糊涂的解决" class="headerlink" title="稀里糊涂的解决"></a>稀里糊涂的解决</h3><p>偶然看到一个博客：：：：<br><a href="https://blog.csdn.net/weixin_45923100/article/details/121782413?ops_request_misc=&request_id=&biz_id=102&utm_term=vue3-%E8%B7%AF%E7%94%B1%E8%83%BD%E8%B7%B3%E8%BD%AC%EF%BC%8C%E9%A1%B5%E9%9D%A2%E5%8D%B4%E4%B8%8D%E5%8F%98%E5%8C%96%EF%BC%8C%E5%88%B7%E6%96%B0%E5%90%8E%E6%88%90%E5%8A%9F%E6%98%BE%E7%A4%BA&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-9-121782413.nonecase&spm=1018.2226.3001.4187">https://blog.csdn.net/weixin_45923100/article/details/121782413?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=vue3-%E8%B7%AF%E7%94%B1%E8%83%BD%E8%B7%B3%E8%BD%AC%EF%BC%8C%E9%A1%B5%E9%9D%A2%E5%8D%B4%E4%B8%8D%E5%8F%98%E5%8C%96%EF%BC%8C%E5%88%B7%E6%96%B0%E5%90%8E%E6%88%90%E5%8A%9F%E6%98%BE%E7%A4%BA&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-9-121782413.nonecase&amp;spm=1018.2226.3001.4187</a></p><p>突然想到会不会是组件的问题，最后，真的，我哭死😢😢😢😢😢😢😢</p><h4 id="原始代码"><a href="#原始代码" class="headerlink" title="原始代码"></a>原始代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;contains&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;video-borde&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://127.0.0.1:5000/video&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;videoPlayer&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;video-js&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 100%;&quot;</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; defineComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> videojs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;video.js&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;video.js/dist/video-js.css&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;VideoPlayer&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">components</span>: &#123; defineComponent &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">const</span> options = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 设置video.js的配置选项</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">controls</span>: <span class="hljs-literal">true</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">autoplay</span>: <span class="hljs-literal">true</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">fluid</span>: <span class="hljs-literal">true</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 初始化video.js</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">player</span> = <span class="hljs-title function_">videojs</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">videoPlayer</span>, options, <span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Video.js初始化完成&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 监听video.js的ready事件</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">player</span>.<span class="hljs-title function_">ready</span>(<span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Video.js播放器已准备好&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">destroyed</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 销毁video.js实例</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">player</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">player</span>.<span class="hljs-title function_">dispose</span>();</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>  <br></code></pre></td></tr></table></figure><h3 id="修改后"><a href="#修改后" class="headerlink" title="修改后"></a>修改后</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;contains&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;video-borde&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://127.0.0.1:5000/video&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;videoPlayer&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;video-js&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 100%;&quot;</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; defineComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;video.js/dist/video-js.css&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;VideoPlayer&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">components</span>: &#123; defineComponent &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>  <br></code></pre></td></tr></table></figure><p>删掉就好了！！！😒，就是页面没有销毁，不能跳转！！！就这样吧，累了睡了。😴😕</p>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue-router</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vs2019出现的奇怪报错</title>
    <link href="/2023/09/10/vs2019%E5%87%BA%E7%8E%B0%E7%9A%84%E5%A5%87%E6%80%AA%E6%8A%A5%E9%94%99/"/>
    <url>/2023/09/10/vs2019%E5%87%BA%E7%8E%B0%E7%9A%84%E5%A5%87%E6%80%AA%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">warning: C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失<br>error: C2001: 常量中有换行符<br>error: C2146: 语法错误: 缺少“)”(在标识符“label”的前面)<br>error: C2146: 语法错误: 缺少“;”(在标识符“label”的前面)<br></code></pre></td></tr></table></figure><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>只要在末尾加一个空格，让最后一个中文汉字与双引号隔开!!!!!</p>]]></content>
    
    
    <categories>
      
      <category>vs2019报错</category>
      
    </categories>
    
    
    <tags>
      
      <tag>error</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git建立分支并push远程上传</title>
    <link href="/2023/09/09/Git%E5%BB%BA%E7%AB%8B%E5%88%86%E6%94%AF%E5%B9%B6push%E8%BF%9C%E7%A8%8B%E4%B8%8A%E4%BC%A0/"/>
    <url>/2023/09/09/Git%E5%BB%BA%E7%AB%8B%E5%88%86%E6%94%AF%E5%B9%B6push%E8%BF%9C%E7%A8%8B%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="Git使用ssh建立连接"><a href="#Git使用ssh建立连接" class="headerlink" title="Git使用ssh建立连接"></a>Git使用ssh建立连接</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init<br>git remote add origin git@github.com:Silence-Le/my-miaomiao.git<br>git push -u origin master<br></code></pre></td></tr></table></figure><h2 id="Git创立新的分支"><a href="#Git创立新的分支" class="headerlink" title="Git创立新的分支"></a>Git创立新的分支</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">新建一个本地分支，并且切换到创建的分支<br>git checkout -b dev-xx<br><br>向远程推送本地分支，会自动创建远程分支<br>git push --set-upstream  origin dev-xx<br></code></pre></td></tr></table></figure><h2 id="多git位置设置"><a href="#多git位置设置" class="headerlink" title="多git位置设置"></a>多git位置设置</h2><p>可能会出现在gitee和github都需要使用ssh来建立连接，也是相同的流程</p><ol><li>使用秘钥生成工具生成rsa秘钥和公钥<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">ssh-keygen -t rsa -C <span class="hljs-string">&quot;xxx@xxx.com&quot;</span><br><span class="hljs-regexp">//</span>之后会弹出存储的地址，可以设置为新设定的地址，因为可能会存在多个网站同时需要ssh管理哈<br></code></pre></td></tr></table></figure><img src="/ssh.jpg"><br>就像这样吧</li><li>将rsa公钥添加到代码托管平台<br>id_rsa.pub文件的内容哈<br><img src="/2023/09/09/Git%E5%BB%BA%E7%AB%8B%E5%88%86%E6%94%AF%E5%B9%B6push%E8%BF%9C%E7%A8%8B%E4%B8%8A%E4%BC%A0/githubkey.png"></li><li>将rsa秘钥添加到ssh-agent中，为ssh client指定使用的秘钥文件<br>然后就在.ssh配置文件声明就好，主要是制定好私钥所在的文件位置就可以<br><img src="/2023/09/09/Git%E5%BB%BA%E7%AB%8B%E5%88%86%E6%94%AF%E5%B9%B6push%E8%BF%9C%E7%A8%8B%E4%B8%8A%E4%BC%A0/config.jpg"></li></ol><h2 id="gitignore文件"><a href="#gitignore文件" class="headerlink" title=".gitignore文件"></a>.gitignore文件</h2>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python-vue前端实时播放视频流</title>
    <link href="/2023/09/06/python-vue%E5%89%8D%E7%AB%AF%E5%AE%9E%E6%97%B6%E6%92%AD%E6%94%BE%E8%A7%86%E9%A2%91%E6%B5%81/"/>
    <url>/2023/09/06/python-vue%E5%89%8D%E7%AB%AF%E5%AE%9E%E6%97%B6%E6%92%AD%E6%94%BE%E8%A7%86%E9%A2%91%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h1 id="python后端视频流生成"><a href="#python后端视频流生成" class="headerlink" title="python后端视频流生成"></a>python后端视频流生成</h1><h1 id="vue前端获取视频流播放"><a href="#vue前端获取视频流播放" class="headerlink" title="vue前端获取视频流播放"></a>vue前端获取视频流播放</h1><h1 id="解决vue和flask端口不一的跨域问题"><a href="#解决vue和flask端口不一的跨域问题" class="headerlink" title="解决vue和flask端口不一的跨域问题"></a>解决vue和flask端口不一的跨域问题</h1><p>前端使用axios</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install axios<br></code></pre></td></tr></table></figure><p>然后在vue项目中的main.js配置axios</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$axios</span> = axios<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>python</tag>
      
      <tag>视频流</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
