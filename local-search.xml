<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vuedraggable——vue拖拽组件</title>
    <link href="/2023/11/04/vuedraggable%E2%80%94%E2%80%94vue%E6%8B%96%E6%8B%BD%E7%BB%84%E4%BB%B6/"/>
    <url>/2023/11/04/vuedraggable%E2%80%94%E2%80%94vue%E6%8B%96%E6%8B%BD%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>属于是一个惊喜的组件——主要用于<strong>vue中针对数据绑定的list数组</strong>进行一个排序</p><h1 id="vuedraggable"><a href="#vuedraggable" class="headerlink" title="vuedraggable"></a>vuedraggable</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>官方：<a href="https://github.com/SortableJS/vue.draggable.next">https://github.com/SortableJS/vue.draggable.next</a><br>中文文档：<a href="https://debug.itxst.com/js/ivv3eivm">https://debug.itxst.com/js/ivv3eivm</a><br>注意下载的vue的版本，vue2和vue3使用的库和方式都不一样(<strong>这里使用的vue2</strong>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs node">cnpm install vuedraggable@2.24.0<br></code></pre></td></tr></table></figure><h2 id="使用参数定义"><a href="#使用参数定义" class="headerlink" title="使用参数定义"></a>使用参数定义</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;draggable v-model=&quot;trades_1&quot; :scroll=&quot;true&quot; animation=&quot;400&quot; group=&quot;modal1&quot; class=&quot;modal1&quot; &gt;<br>&lt;transition-group&gt;<br>&lt;div class=&#x27;tradeItem&#x27; :class=&quot;&#123;selected:trade===selectedTrade&#125;&quot; @click=&quot;selectTrade(trade)&quot; v-for=&quot;trade in trades_1&quot; :key=&quot;trade.speech_id&quot; :style=&quot;getSingleTradeStyle(trade)&quot; &gt;&lt;/div&gt;<br>    &lt;/transition-group&gt;<br>&lt;/draggable&gt;<br></code></pre></td></tr></table></figure><ul><li>v-model：绑定需要for循环的列表</li><li>scroll：是否允许滚动操作</li><li>animation：定义在拖动过程中的过渡效果的持续事件</li><li>group：同一个group组之间内部的元素可以相互移动</li></ul><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>大概就是可以正常拖动，还蛮丝滑的</p>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>D3-document</title>
    <link href="/2023/10/22/D3-document/"/>
    <url>/2023/10/22/D3-document/</url>
    
    <content type="html"><![CDATA[<h1 id="操作教程"><a href="#操作教程" class="headerlink" title="操作教程"></a>操作教程</h1><h2 id="散点图中圆形节点内插图"><a href="#散点图中圆形节点内插图" class="headerlink" title="散点图中圆形节点内插图"></a>散点图中圆形节点内插图</h2><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>先给一个效果展示吧<br><img src="/2023/10/22/D3-document/1.jpg"><br>悬浮到圆点之后可以获得一个卷福</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>主要是使用d3中SVG 的 <code>pattern</code> 元素：<code>pattern</code> 元素可以定义一个可重复的图案，然后将其应用到其他元素的填充或描边属性中。</p><p>给一个代码展示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建一个 pattern 元素</span><br><span class="hljs-keyword">const</span> pattern = svg.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;defs&quot;</span>)<br>    .<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;pattern&quot;</span>)<br>    .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;circle-pattern&quot;</span>)<br>    .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;width&quot;</span>, <span class="hljs-number">1</span>)<br>    .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;height&quot;</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 向 pattern 中添加 image 元素</span><br>pattern.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;image&quot;</span>)<br>  .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;xlink:href&quot;</span>, <span class="hljs-string">&quot;path/to/your/image.jpg&quot;</span>) <span class="hljs-comment">// 替换为有效的图像链接</span><br>  .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">0</span>) <span class="hljs-comment">//相对上一级元素的左上角坐标</span><br>  .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-number">0</span>)<br>  .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;width&quot;</span>, imageRadius * <span class="hljs-number">2</span>)<br>  .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;height&quot;</span>, imageRadius * <span class="hljs-number">2</span>);<br><br><span class="hljs-comment">// 创建圆圈，并将 pattern 应用为填充</span><br>selectdot.<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;r&quot;</span>, imageRadius)<br>  .<span class="hljs-title function_">style</span>(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;url(#circle-pattern)&quot;</span>)<br>  .<span class="hljs-title function_">style</span>(<span class="hljs-string">&quot;opacity&quot;</span>, <span class="hljs-string">&quot;1.0&quot;</span>);<br></code></pre></td></tr></table></figure><p>其中获得图片在Vue中使用import导入图片</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> juanfu <span class="hljs-keyword">from</span> @/assets/image/juanfu.<span class="hljs-property">jpg</span><br><span class="hljs-comment">//@为src的路径，可以在vite.config.js中查看</span><br></code></pre></td></tr></table></figure><p>当然，可能还会出现针对不同结点需要导入相对应的图片，可以在<code>pattern</code>元素上绑定数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建一个 pattern 元素，并设置其id</span><br><span class="hljs-keyword">const</span> pattern = svg.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;defs&quot;</span>)<br>  .<span class="hljs-title function_">selectAll</span>(<span class="hljs-string">&quot;pattern&quot;</span>)<br>  .<span class="hljs-title function_">data</span>(data) <span class="hljs-comment">// 假设您的数据包含各个节点的信息</span><br>  .<span class="hljs-title function_">enter</span>()<br>  .<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;pattern&quot;</span>)<br>    .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-function">(<span class="hljs-params">d, i</span>) =&gt;</span> <span class="hljs-string">&quot;pattern-&quot;</span> + i)<br>    .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;width&quot;</span>, <span class="hljs-number">1</span>)<br>    .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;height&quot;</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 向每个 pattern 中添加 image 元素，并为每个节点指定不同的图像链接</span><br>pattern.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;image&quot;</span>)<br>  .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;xlink:href&quot;</span>, <span class="hljs-function">(<span class="hljs-params">d</span>) =&gt;</span> d.<span class="hljs-property">imageUrl</span>) <span class="hljs-comment">// 根据节点的数据设置图像链接</span><br>  .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">0</span>)<br>  .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-number">0</span>)<br>  .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;width&quot;</span>, imageRadius * <span class="hljs-number">2</span>)<br>  .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;height&quot;</span>, imageRadius * <span class="hljs-number">2</span>);<br><br><span class="hljs-comment">// 创建圆圈，并为每个节点应用不同的图案填充</span><br><span class="hljs-keyword">const</span> circles = svg.<span class="hljs-title function_">selectAll</span>(<span class="hljs-string">&quot;circle&quot;</span>)<br>  .<span class="hljs-title function_">data</span>(data) <span class="hljs-comment">// 假设您的数据包含各个节点的信息</span><br>  .<span class="hljs-title function_">enter</span>()<br>  .<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;circle&quot;</span>)<br>    .<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;r&quot;</span>, imageRadius)<br>    .<span class="hljs-title function_">style</span>(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-function">(<span class="hljs-params">d, i</span>) =&gt;</span> <span class="hljs-string">&quot;url(#pattern-&quot;</span> + i + <span class="hljs-string">&quot;)&quot;</span>)<br>    .<span class="hljs-title function_">style</span>(<span class="hljs-string">&quot;opacity&quot;</span>, <span class="hljs-string">&quot;1.0&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="效果中还出现的其他操作代码"><a href="#效果中还出现的其他操作代码" class="headerlink" title="效果中还出现的其他操作代码"></a>效果中还出现的其他操作代码</h4><p>比如对于卷福图片描边</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">.<span class="hljs-title function_">style</span>(<span class="hljs-string">&quot;stroke&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="没有悬停事件时缩放会更新，但是悬停事件完成之后再缩放，之前发生悬停事件的圆点就不会随着缩放变化了"><a href="#没有悬停事件时缩放会更新，但是悬停事件完成之后再缩放，之前发生悬停事件的圆点就不会随着缩放变化了" class="headerlink" title="没有悬停事件时缩放会更新，但是悬停事件完成之后再缩放，之前发生悬停事件的圆点就不会随着缩放变化了"></a>没有悬停事件时缩放会更新，但是悬停事件完成之后再缩放，之前发生悬停事件的圆点就不会随着缩放变化了</h2><p>问题主要是因为悬停事件操作和缩放事件操作的属性不一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">selectdot.<span class="hljs-title function_">style</span>(<span class="hljs-string">&quot;r&quot;</span>, currentRadius)<br><span class="hljs-comment">// 这是悬停事件对于r的操作</span><br>dots.<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;cx&quot;</span>, <span class="hljs-function"><span class="hljs-params">d</span> =&gt;</span> <span class="hljs-title function_">newX</span>(d[<span class="hljs-number">0</span>])).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;cy&quot;</span>, <span class="hljs-function"><span class="hljs-params">d</span> =&gt;</span> <span class="hljs-title function_">newY</span>(d[<span class="hljs-number">1</span>])).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;r&quot;</span>, initialRadius * newScale&gt;maxRadius?<span class="hljs-attr">maxRadius</span>:initialRadius * newScale);<br><span class="hljs-comment">// 这是缩放更新代码</span><br></code></pre></td></tr></table></figure><p>两者对于r的更新属性不一样，所以不统一，要更新为一样的再操作。</p>]]></content>
    
    
    <categories>
      
      <category>d3文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>d3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue😒😒</title>
    <link href="/2023/10/12/Vue%F0%9F%98%92%F0%9F%98%92/"/>
    <url>/2023/10/12/Vue%F0%9F%98%92%F0%9F%98%92/</url>
    
    <content type="html"><![CDATA[<h1 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h1><h2 id="router"><a href="#router" class="headerlink" title="router"></a>router</h2><p>主要用于实现页面切换——Vue是SRA单页面应用，实际上浏览器只有一个页面，实现内部的组件不断更新达到切换页面的效果。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">this</span>.$router和<span class="hljs-keyword">this</span>.$route<br><span class="hljs-number">1.</span><span class="hljs-keyword">this</span>.$router<br>表示再main.js中挂在的router，一模一样，可以再所有组件中使用（切换组件操作）<br><br><span class="hljs-number">2.</span><span class="hljs-keyword">this</span>.$route<br>表示当前路由，首先要确保当前路由存在：也就是当前路由有对应的数据可以获取<br></code></pre></td></tr></table></figure><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes = [<br>&#123; <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user&#x27;</span>, <br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;User&#x27;</span>, <br><span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../components/user.vue&#x27;</span>), <br><span class="hljs-attr">children</span>: [<br>&#123; <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;man&#x27;</span>, <br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Man&#x27;</span>, <br><span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../components/man.vue&#x27;</span>)<br>&#125;, <br>&#123; <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;woman&#x27;</span>, <br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;WoMan&#x27;</span>, <br><span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../components/woman.vue&#x27;</span>) <br>&#125;<br>] <br>&#125;]<br></code></pre></td></tr></table></figure><p> 不要忘记在嵌套路由的页面增加router-view</p>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>贝叶斯分类器</title>
    <link href="/2023/09/21/%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB%E5%99%A8/"/>
    <url>/2023/09/21/%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>基础的贝叶斯分类器主要是简单的朴素贝叶斯分类器和正态分布贝叶斯分类器，假设特征向量为<strong>x</strong>，分类的类别为y</p><h2 id="朴素贝叶斯分类器"><a href="#朴素贝叶斯分类器" class="headerlink" title="朴素贝叶斯分类器"></a>朴素贝叶斯分类器</h2><p>所谓“朴素”，是<strong>假定所有输入事件之间是相互独立</strong>。进行这个假设是因为独立事件间的概率计算更简单。<br>贝叶斯公式：$P(B|A)&#x3D;\frac{P(A|B)P(B)}{P(A)}$<br>带入实际的情况就是：$P(y_i|x)&#x3D;\frac{P(x|y_i)P(y_i)}{P(x)}$<br>$P(x|y_i),P(y_i),P(x)$都可以根据训练的数据得到（数据可能是离散或者连续的）</p><h4 id="离散类型的数据"><a href="#离散类型的数据" class="headerlink" title="离散类型的数据"></a>离散类型的数据</h4><p>利用频率估计概率的方式得到，$P(y_i)和P(x)$都很好得到，主要是求$P(x|y_i)&#x3D;\prod_{j&#x3D;1}^{n}P(x_j|y_i)$<br>分别计算不同分类下的后验概率，概率最高的就是所属的类别</p><h3 id="连续型数据"><a href="#连续型数据" class="headerlink" title="连续型数据"></a>连续型数据</h3><p>将求概率的方式改为概率密度</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> ndarray, zeros, unique<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NaiveBayes</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;朴素贝叶斯&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,</span><br><span class="hljs-params">                 isSmoothing: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span>,  <span class="hljs-comment"># 是否使用拉普拉斯平滑</span></span><br><span class="hljs-params">                 </span>):<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">type</span>(isSmoothing)==<span class="hljs-built_in">bool</span>, <span class="hljs-string">&#x27;isSmoothing应为布尔值&#x27;</span><br>        self.isSmoothing = isSmoothing  <span class="hljs-comment"># 是否使用拉普拉斯平滑（Laplacian smoothing）</span><br>        <span class="hljs-keyword">if</span> self.isSmoothing:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;使用拉普拉斯平滑&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;不使用平滑&#x27;</span>)<br>        self.M = <span class="hljs-literal">None</span>         <span class="hljs-comment"># 输入特征向量的维数</span><br>        self.K = <span class="hljs-literal">None</span>         <span class="hljs-comment"># 类别数</span><br>        self.classes_ = <span class="hljs-literal">None</span>  <span class="hljs-comment"># K维向量：K个类别标签</span><br>        self.Py_ = <span class="hljs-literal">None</span>       <span class="hljs-comment"># 字典：存储K个类别的先验概率</span><br>        self.values__ = <span class="hljs-literal">None</span>  <span class="hljs-comment"># 字典：样本x_的各个离散值特征可能的取值</span><br>        self.Pxy___ = <span class="hljs-literal">None</span>    <span class="hljs-comment"># 字典：存储所有条件概率；高斯分布的均值、方差、标准差</span><br>        self.indexContinuousFeatures_ = <span class="hljs-literal">None</span>  <span class="hljs-comment"># 数组索引：连续值特征的序号</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fit</span>(<span class="hljs-params">self, X__: ndarray, y_: ndarray,</span><br><span class="hljs-params">            indexContinuousFeatures_=(<span class="hljs-params"></span>),  <span class="hljs-comment"># 连续值特征的序号</span></span><br><span class="hljs-params">            </span>):<br>        <span class="hljs-string">&quot;&quot;&quot;训练&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">type</span>(X__)==ndarray <span class="hljs-keyword">and</span> X__.ndim==<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;输入训练样本矩阵X__应为2维ndarray&#x27;</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">type</span>(y_)==ndarray  <span class="hljs-keyword">and</span> y_.ndim==<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;输入训练标签y_应为1维ndarray&#x27;</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(X__)==<span class="hljs-built_in">len</span>(y_), <span class="hljs-string">&#x27;输入训练样本数量应等于标签数量&#x27;</span><br>        self.indexContinuousFeatures_ = <span class="hljs-built_in">tuple</span>(indexContinuousFeatures_)  <span class="hljs-comment"># 数组索引：连续值特征的序号</span><br>        <span class="hljs-keyword">if</span> self.indexContinuousFeatures_:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;给定第<span class="hljs-subst">&#123;self.indexContinuousFeatures_&#125;</span>特征为连续值特征&#x27;</span>)<br>        N, self.M = X__.shape          <span class="hljs-comment"># 训练样本数量、输入特征向量的维数</span><br>        self.classes_ = unique(y_)     <span class="hljs-comment"># K维向量：K个类别标签</span><br>        self.K = <span class="hljs-built_in">len</span>(self.classes_)    <span class="hljs-comment"># 类别数</span><br>        self.values__ = values__ = &#123;&#125;  <span class="hljs-comment"># 字典：训练样本的各个离散特征的所有可能取值</span><br>        self.Py_ = &#123;&#125;                  <span class="hljs-comment"># 字典：存储K个类别的先验概率</span><br>        self.Pxy___ = Pxy___ = &#123;&#125;      <span class="hljs-comment"># 字典：存储所有条件概率；高斯分布的均值、方差、标准差</span><br>        <span class="hljs-comment"># Pxy___[c1ass][m][value] 表示“在c1ass类别下，第m个特征取值为value的条件概率”</span><br>        <span class="hljs-comment"># Pxy___[c1ass][m][&#x27;μ&#x27;] 表示“在c1ass类别下，第m个特征取值所服从高斯分布的为均值”</span><br>        <span class="hljs-keyword">for</span> k, c1ass <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(self.classes_):<br>            <span class="hljs-string">&quot;&quot;&quot;遍历所有K个类别&quot;&quot;&quot;</span><br>            <span class="hljs-comment"># 计算先验概率</span><br>            Nk = (y_==c1ass).<span class="hljs-built_in">sum</span>()  <span class="hljs-comment"># 第k类别的样本数量</span><br>            <span class="hljs-keyword">if</span> self.isSmoothing:<br>                self.Py_[c1ass] = (Nk + <span class="hljs-number">1</span>)/(N + self.K)  <span class="hljs-comment"># 使用平滑的先验概率</span><br>            <span class="hljs-keyword">else</span>:<br>                self.Py_[c1ass] = Nk/N  <span class="hljs-comment"># 不使用平滑的先验概率</span><br><br>            <span class="hljs-comment"># 计算条件概率</span><br>            Pxy___[c1ass] = &#123;&#125;  <span class="hljs-comment"># 存储c1ass类别的条件概率</span><br>            <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.M):<br>                <span class="hljs-string">&quot;&quot;&quot;遍历第k类别的所有M个特征&quot;&quot;&quot;</span><br>                Pxy___[c1ass][m] = &#123;&#125;  <span class="hljs-comment"># 存储c1ass类别的第m特征的条件概率或高斯分布参数</span><br><br>                <span class="hljs-keyword">if</span> m <span class="hljs-keyword">in</span> self.indexContinuousFeatures_:<br>                    <span class="hljs-comment"># 对于连续值特征，计算均值μ、方差σ2、标准差σ</span><br>                    xm_ = X__[y_==c1ass, m].astype(<span class="hljs-built_in">float</span>)    <span class="hljs-comment"># 提取第k类别第m特征的数据</span><br>                    Pxy___[c1ass][m][<span class="hljs-string">&#x27;μ&#x27;</span>] = xm_.mean()       <span class="hljs-comment"># 第k类别第m特征取值的均值</span><br>                    Pxy___[c1ass][m][<span class="hljs-string">&#x27;σ2&#x27;</span>] = σ<span class="hljs-number">2</span> = xm_.var()  <span class="hljs-comment"># 第k类别第m特征取值的方差</span><br>                    Pxy___[c1ass][m][<span class="hljs-string">&#x27;σ&#x27;</span>] = σ<span class="hljs-number">2</span>**<span class="hljs-number">0.5</span>          <span class="hljs-comment"># 第k类别第m特征取值的标准差</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-comment"># 对于离散型特征，计算条件概率</span><br>                    values__[m] = unique(X__[:, m])  <span class="hljs-comment"># 第m特征所有可能的取值</span><br>                    L = <span class="hljs-built_in">len</span>(values__[m])             <span class="hljs-comment"># 第m特征可能取值的数量</span><br>                    <span class="hljs-keyword">for</span> l, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(values__[m]):<br>                        <span class="hljs-string">&quot;&quot;&quot;遍历第k类别的第m特征的所有可能的取值，计算条件概率&quot;&quot;&quot;</span><br>                        Nxy = ((y_==c1ass) &amp; (X__[:, m]==value)).<span class="hljs-built_in">sum</span>()   <span class="hljs-comment"># 满足“属于第k类别且第m特征取值为value”的样本数量</span><br>                        <span class="hljs-keyword">if</span> self.isSmoothing:<br>                            Pxy___[c1ass][m][value] = (Nxy + <span class="hljs-number">1</span>)/(Nk + L)  <span class="hljs-comment"># 使用平滑的条件概率</span><br>                        <span class="hljs-keyword">else</span>:<br>                            Pxy___[c1ass][m][value] = Nxy/Nk  <span class="hljs-comment"># 不使用平滑的条件概率</span><br>        <span class="hljs-keyword">return</span> self<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">self, X__: ndarray</span>) -&gt; ndarray:<br>        <span class="hljs-string">&quot;&quot;&quot;测试&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">type</span>(X__)==ndarray <span class="hljs-keyword">and</span> X__.ndim==<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;输入测试样本矩阵X__应为2维ndarray&#x27;</span><br>        <span class="hljs-keyword">assert</span> X__.shape[<span class="hljs-number">1</span>]==self.M, <span class="hljs-string">f&#x27;输入测试样本维数应等于训练样本维数<span class="hljs-subst">&#123;self.M&#125;</span>&#x27;</span><br>        PyPxy__ = zeros([<span class="hljs-built_in">len</span>(X__), self.K])  <span class="hljs-comment"># N×K矩阵：初始化先验概率与条件概率之积</span><br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(X__)):<br>            <span class="hljs-string">&quot;&quot;&quot;遍历所有测试样本&quot;&quot;&quot;</span><br>            <span class="hljs-keyword">for</span> k, c1ass <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(self.classes_):<br>                <span class="hljs-string">&quot;&quot;&quot;遍历所有K个类别，计算测试样本属于各类别的后验概率（先验概率与条件概率之积）&quot;&quot;&quot;</span><br>                PyPxy__[n, k] = self.Py_[c1ass]  <span class="hljs-comment"># 赋先验概率</span><br>                <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.M):<br>                    <span class="hljs-string">&quot;&quot;&quot;遍历第k类别所有特征，索引对应的条件概率&quot;&quot;&quot;</span><br>                    <span class="hljs-keyword">if</span> m <span class="hljs-keyword">in</span> self.indexContinuousFeatures_:<br>                        <span class="hljs-comment"># 若第m特征为连续值特征</span><br>                        μ = self.Pxy___[c1ass][m][<span class="hljs-string">&#x27;μ&#x27;</span>]    <span class="hljs-comment"># 第m特征的均值</span><br>                        σ = self.Pxy___[c1ass][m][<span class="hljs-string">&#x27;σ&#x27;</span>]    <span class="hljs-comment"># 第m特征的标准差</span><br>                        σ<span class="hljs-number">2</span> = self.Pxy___[c1ass][m][<span class="hljs-string">&#x27;σ2&#x27;</span>]  <span class="hljs-comment"># 第m特征的方差</span><br>                        xm = <span class="hljs-built_in">float</span>(X__[n, m])             <span class="hljs-comment"># 第m特征的取值</span><br>                        π = <span class="hljs-number">3.141592653589793</span>             <span class="hljs-comment"># 圆周率</span><br>                        e = <span class="hljs-number">2.718281828459045</span>             <span class="hljs-comment"># 自然对数的底数</span><br>                        p = <span class="hljs-number">1</span>/((<span class="hljs-number">2</span>*π)**<span class="hljs-number">0.5</span>*σ)*e**(-(xm - μ)**<span class="hljs-number">2</span>/(<span class="hljs-number">2</span>*σ<span class="hljs-number">2</span>))  <span class="hljs-comment"># 高斯概率密度</span><br>                        PyPxy__[n, k] *= p  <span class="hljs-comment"># 先验概率与条件概率密度之积</span><br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-comment"># 若第m特征为离散值特征</span><br>                        value = X__[n, m]  <span class="hljs-comment"># 读取：第n样本的第m特征的取值</span><br>                        <span class="hljs-keyword">assert</span> value <span class="hljs-keyword">in</span> self.values__[m], <span class="hljs-string">f&quot;训练样本集当中第<span class="hljs-subst">&#123;m&#125;</span>特征无此取值&#x27;<span class="hljs-subst">&#123;value&#125;</span>&#x27;&quot;</span><br>                        PyPxy__[n, k] *= self.Pxy___[c1ass][m][value]  <span class="hljs-comment"># 先验概率与条件概率之积</span><br>        y_ = self.classes_[PyPxy__.argmax(axis=<span class="hljs-number">1</span>)]  <span class="hljs-comment"># 根据最大化类别的后验概率，归类</span><br>        <span class="hljs-keyword">return</span> y_<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">accuracy</span>(<span class="hljs-params">self, X__: ndarray, y_: ndarray</span>) -&gt; <span class="hljs-built_in">float</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;预测正确率&quot;&quot;&quot;</span><br>        测试样本正确数 = <span class="hljs-built_in">sum</span>(self.predict(X__)==y_)<br>        测试样本总数 = <span class="hljs-built_in">len</span>(y_)<br>        <span class="hljs-keyword">return</span> 测试样本正确数/测试样本总数<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>    <span class="hljs-comment"># 设置随机种子</span><br>    <span class="hljs-keyword">from</span> numpy.random <span class="hljs-keyword">import</span> seed; seed(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> seed; seed(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;使用天气数据集进行试验...\n&#x27;</span>)<br>    天气数据集 = np.array([<br>    <span class="hljs-comment">#    风向   湿度 紫外线指数  温度  类别标签</span><br>        [<span class="hljs-string">&#x27;东&#x27;</span>, <span class="hljs-string">&#x27;干燥&#x27;</span>,  <span class="hljs-string">&#x27;强&#x27;</span>,    <span class="hljs-number">33</span>,  <span class="hljs-string">&#x27;晴天&#x27;</span>],<br>        [<span class="hljs-string">&#x27;南&#x27;</span>, <span class="hljs-string">&#x27;潮湿&#x27;</span>,  <span class="hljs-string">&#x27;强&#x27;</span>,    <span class="hljs-number">31</span>,  <span class="hljs-string">&#x27;晴天&#x27;</span>],<br>        [<span class="hljs-string">&#x27;南&#x27;</span>, <span class="hljs-string">&#x27;潮湿&#x27;</span>,  <span class="hljs-string">&#x27;弱&#x27;</span>,    <span class="hljs-number">24</span>,  <span class="hljs-string">&#x27;阴天&#x27;</span>],<br>        [<span class="hljs-string">&#x27;西&#x27;</span>, <span class="hljs-string">&#x27;干燥&#x27;</span>,  <span class="hljs-string">&#x27;强&#x27;</span>,    <span class="hljs-number">27</span>,  <span class="hljs-string">&#x27;阴天&#x27;</span>],<br>        [<span class="hljs-string">&#x27;西&#x27;</span>, <span class="hljs-string">&#x27;潮湿&#x27;</span>,  <span class="hljs-string">&#x27;强&#x27;</span>,    <span class="hljs-number">30</span>,  <span class="hljs-string">&#x27;阴天&#x27;</span>],<br>        [<span class="hljs-string">&#x27;南&#x27;</span>, <span class="hljs-string">&#x27;适中&#x27;</span>,  <span class="hljs-string">&#x27;弱&#x27;</span>,    <span class="hljs-number">22</span>,  <span class="hljs-string">&#x27;雨天&#x27;</span>],<br>        [<span class="hljs-string">&#x27;北&#x27;</span>, <span class="hljs-string">&#x27;潮湿&#x27;</span>,  <span class="hljs-string">&#x27;弱&#x27;</span>,    <span class="hljs-number">20</span>,  <span class="hljs-string">&#x27;雨天&#x27;</span>],<br>        ])<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;使用仅包含离散值特征（风向、湿度、紫外线指数）的训练样本集&#x27;</span>)<br>    Xtrain__ = 天气数据集[:, :<span class="hljs-number">3</span>]            <span class="hljs-comment"># 训练样本特征向量矩阵</span><br>    ytrain_  = 天气数据集[:, -<span class="hljs-number">1</span>]            <span class="hljs-comment"># 训练样本标签</span><br>    model = NaiveBayes(isSmoothing=<span class="hljs-literal">True</span>)   <span class="hljs-comment"># 实例化朴素贝叶斯模型，使用平滑</span><br>    model.fit(Xtrain__, ytrain_)           <span class="hljs-comment"># 训练</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;对训练样本预测的正确率：<span class="hljs-subst">&#123;model.accuracy(Xtrain__, ytrain_):<span class="hljs-number">.3</span>f&#125;</span>&#x27;</span>)<br><br>    Xtest__ = np.array([[<span class="hljs-string">&#x27;南&#x27;</span>, <span class="hljs-string">&#x27;干燥&#x27;</span>, <span class="hljs-string">&#x27;强&#x27;</span>],<br>                        [<span class="hljs-string">&#x27;北&#x27;</span>, <span class="hljs-string">&#x27;干燥&#x27;</span>, <span class="hljs-string">&#x27;强&#x27;</span>]])  <span class="hljs-comment"># 测试样本集</span><br>    ytest_ = model.predict(Xtest__)            <span class="hljs-comment"># 测试样本集的预测结果</span><br>    <span class="hljs-keyword">for</span> x_, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(Xtest__, ytest_):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;预测新样本 <span class="hljs-subst">&#123;x_&#125;</span> 的类别为 &quot;<span class="hljs-subst">&#123;y&#125;</span>&quot;&#x27;</span>)  <span class="hljs-comment"># 显示预测结果</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n---------------------------------------------------\n&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;使用包含离散值特征和连续值特征（风向、湿度、紫外线指数、温度）的训练样本集&#x27;</span>)<br>    Xtrain__ = 天气数据集[:, :<span class="hljs-number">4</span>]           <span class="hljs-comment"># 训练样本特征向量矩阵</span><br>    ytrain_  = 天气数据集[:, -<span class="hljs-number">1</span>]           <span class="hljs-comment"># 训练样本标签</span><br>    indexContinuousFeatures_ = (<span class="hljs-number">3</span>,)       <span class="hljs-comment"># 连续值特征的序号</span><br>    model = NaiveBayes(isSmoothing=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 实例化朴素贝叶斯模型，使用平滑</span><br>    model.fit(Xtrain__, ytrain_, indexContinuousFeatures_=indexContinuousFeatures_)  <span class="hljs-comment"># 训练</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;对训练样本预测的正确率：<span class="hljs-subst">&#123;model.accuracy(Xtrain__, ytrain_):<span class="hljs-number">.3</span>f&#125;</span>&#x27;</span>)<br><br>    Xtest__ = np.array([[<span class="hljs-string">&#x27;南&#x27;</span>, <span class="hljs-string">&#x27;干燥&#x27;</span>, <span class="hljs-string">&#x27;强&#x27;</span>, <span class="hljs-number">34</span>],<br>                        [<span class="hljs-string">&#x27;北&#x27;</span>, <span class="hljs-string">&#x27;干燥&#x27;</span>, <span class="hljs-string">&#x27;强&#x27;</span>, <span class="hljs-number">26</span>]])  <span class="hljs-comment"># 测试样本集</span><br>    ytest_ = model.predict(Xtest__)                <span class="hljs-comment"># 测试样本集的预测结果</span><br>    <span class="hljs-keyword">for</span> x_, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(Xtest__, ytest_):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;预测新样本 <span class="hljs-subst">&#123;x_&#125;</span> 的类别为 &quot;<span class="hljs-subst">&#123;y&#125;</span>&quot;&#x27;</span>)  <span class="hljs-comment"># 显示预测结果</span><br></code></pre></td></tr></table></figure><h2 id="正态分布贝叶斯分类器"><a href="#正态分布贝叶斯分类器" class="headerlink" title="正态分布贝叶斯分类器"></a>正态分布贝叶斯分类器</h2><p>进入更复杂一点的高斯贝叶斯分类器。高斯分布(正态分布)是一个常用分布，其正态密度函数易于分析，而且正态分布有很多实际的应用场景。<br>![[贝叶斯分类器&#x2F;1.jpg]]<br>$μ_k$表示第k个分类所对应的k维均值向量，$|∑_k|$表示第个分类所对应的n×n的协方差矩阵$∑_k$的行列式的值<br>取对数计算：<br>需要估计两组参数：均值向量$μ_k$和协方差矩阵$∑_k$<br>![[Pasted image 20230921220906.png]]</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>浅记一个路由跳转问题：vue-router</title>
    <link href="/2023/09/11/%E6%B5%85%E8%AE%B0%E4%B8%80%E4%B8%AA%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%E9%97%AE%E9%A2%98%EF%BC%9Avue-router/"/>
    <url>/2023/09/11/%E6%B5%85%E8%AE%B0%E4%B8%80%E4%B8%AA%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%E9%97%AE%E9%A2%98%EF%BC%9Avue-router/</url>
    
    <content type="html"><![CDATA[<h2 id="报错问题"><a href="#报错问题" class="headerlink" title="报错问题"></a>报错问题</h2><p>前端到底是谁在写呀！！！！！！！<br>问题就是说咱们这个路由跳转，一个组件映射到一个路径，然后执行跳转，啥事没有，但是出现的<strong>问题就是我从A-&gt;B，从B-&gt;A出问题了</strong>！</p><h3 id="路径变化了，但是页面没过去，刷新一下就有好！！！"><a href="#路径变化了，但是页面没过去，刷新一下就有好！！！" class="headerlink" title="路径变化了，但是页面没过去，刷新一下就有好！！！"></a><font color="#fa6069">路径变化了，但是页面没过去，刷新一下就有好！！！</font></h3><p>现在是在根路径下<br><img src="/./%E6%B5%85%E8%AE%B0%E4%B8%80%E4%B8%AA%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%E9%97%AE%E9%A2%98%EF%BC%9Avue-router/1.jpg"><br>上传文件路径后跳转播放<br><img src="/./%E6%B5%85%E8%AE%B0%E4%B8%80%E4%B8%AA%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%E9%97%AE%E9%A2%98%EF%BC%9Avue-router/2.jpg"><br>最后结束返回&#x2F;根路径就 回不去了（！！！！）<br><img src="/./%E6%B5%85%E8%AE%B0%E4%B8%80%E4%B8%AA%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%E9%97%AE%E9%A2%98%EF%BC%9Avue-router/3.jpg"></p><h3 id="稀里糊涂的解决"><a href="#稀里糊涂的解决" class="headerlink" title="稀里糊涂的解决"></a>稀里糊涂的解决</h3><p>偶然看到一个博客：：：：<br><a href="https://blog.csdn.net/weixin_45923100/article/details/121782413?ops_request_misc=&request_id=&biz_id=102&utm_term=vue3-%E8%B7%AF%E7%94%B1%E8%83%BD%E8%B7%B3%E8%BD%AC%EF%BC%8C%E9%A1%B5%E9%9D%A2%E5%8D%B4%E4%B8%8D%E5%8F%98%E5%8C%96%EF%BC%8C%E5%88%B7%E6%96%B0%E5%90%8E%E6%88%90%E5%8A%9F%E6%98%BE%E7%A4%BA&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-9-121782413.nonecase&spm=1018.2226.3001.4187">https://blog.csdn.net/weixin_45923100/article/details/121782413?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=vue3-%E8%B7%AF%E7%94%B1%E8%83%BD%E8%B7%B3%E8%BD%AC%EF%BC%8C%E9%A1%B5%E9%9D%A2%E5%8D%B4%E4%B8%8D%E5%8F%98%E5%8C%96%EF%BC%8C%E5%88%B7%E6%96%B0%E5%90%8E%E6%88%90%E5%8A%9F%E6%98%BE%E7%A4%BA&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-9-121782413.nonecase&amp;spm=1018.2226.3001.4187</a></p><p>突然想到会不会是组件的问题，最后，真的，我哭死😢😢😢😢😢😢😢</p><h4 id="原始代码"><a href="#原始代码" class="headerlink" title="原始代码"></a>原始代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;contains&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;video-borde&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://127.0.0.1:5000/video&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;videoPlayer&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;video-js&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 100%;&quot;</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; defineComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> videojs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;video.js&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;video.js/dist/video-js.css&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;VideoPlayer&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">components</span>: &#123; defineComponent &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">const</span> options = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 设置video.js的配置选项</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">controls</span>: <span class="hljs-literal">true</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">autoplay</span>: <span class="hljs-literal">true</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">fluid</span>: <span class="hljs-literal">true</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 初始化video.js</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">player</span> = <span class="hljs-title function_">videojs</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">videoPlayer</span>, options, <span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Video.js初始化完成&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 监听video.js的ready事件</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">player</span>.<span class="hljs-title function_">ready</span>(<span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Video.js播放器已准备好&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">destroyed</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 销毁video.js实例</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">player</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">player</span>.<span class="hljs-title function_">dispose</span>();</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>  <br></code></pre></td></tr></table></figure><h3 id="修改后"><a href="#修改后" class="headerlink" title="修改后"></a>修改后</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;contains&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;video-borde&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://127.0.0.1:5000/video&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;videoPlayer&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;video-js&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 100%;&quot;</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; defineComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;video.js/dist/video-js.css&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;VideoPlayer&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">components</span>: &#123; defineComponent &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>  <br></code></pre></td></tr></table></figure><p>删掉就好了！！！😒，就是页面没有销毁，不能跳转！！！就这样吧，累了睡了。😴😕</p>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue-router</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vs2019出现的奇怪报错</title>
    <link href="/2023/09/10/vs2019%E5%87%BA%E7%8E%B0%E7%9A%84%E5%A5%87%E6%80%AA%E6%8A%A5%E9%94%99/"/>
    <url>/2023/09/10/vs2019%E5%87%BA%E7%8E%B0%E7%9A%84%E5%A5%87%E6%80%AA%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">warning: C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失<br>error: C2001: 常量中有换行符<br>error: C2146: 语法错误: 缺少“)”(在标识符“label”的前面)<br>error: C2146: 语法错误: 缺少“;”(在标识符“label”的前面)<br></code></pre></td></tr></table></figure><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>只要在末尾加一个空格，让最后一个中文汉字与双引号隔开!!!!!</p>]]></content>
    
    
    <categories>
      
      <category>vs2019报错</category>
      
    </categories>
    
    
    <tags>
      
      <tag>error</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git建立分支并push远程上传</title>
    <link href="/2023/09/09/Git%E5%BB%BA%E7%AB%8B%E5%88%86%E6%94%AF%E5%B9%B6push%E8%BF%9C%E7%A8%8B%E4%B8%8A%E4%BC%A0/"/>
    <url>/2023/09/09/Git%E5%BB%BA%E7%AB%8B%E5%88%86%E6%94%AF%E5%B9%B6push%E8%BF%9C%E7%A8%8B%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="Git使用ssh建立连接"><a href="#Git使用ssh建立连接" class="headerlink" title="Git使用ssh建立连接"></a>Git使用ssh建立连接</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init<br>git remote add origin git@github.com:Silence-Le/my-miaomiao.git<br>git push -u origin master<br></code></pre></td></tr></table></figure><h2 id="Git创立新的分支"><a href="#Git创立新的分支" class="headerlink" title="Git创立新的分支"></a>Git创立新的分支</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">新建一个本地分支，并且切换到创建的分支<br>git checkout -b dev-xx<br><br>向远程推送本地分支，会自动创建远程分支<br>git push --set-upstream  origin dev-xx<br></code></pre></td></tr></table></figure><h2 id="gitignore文件"><a href="#gitignore文件" class="headerlink" title=".gitignore文件"></a>.gitignore文件</h2><p>111</p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python-vue前端实时播放视频流</title>
    <link href="/2023/09/06/python-vue%E5%89%8D%E7%AB%AF%E5%AE%9E%E6%97%B6%E6%92%AD%E6%94%BE%E8%A7%86%E9%A2%91%E6%B5%81/"/>
    <url>/2023/09/06/python-vue%E5%89%8D%E7%AB%AF%E5%AE%9E%E6%97%B6%E6%92%AD%E6%94%BE%E8%A7%86%E9%A2%91%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h1 id="python后端视频流生成"><a href="#python后端视频流生成" class="headerlink" title="python后端视频流生成"></a>python后端视频流生成</h1><h1 id="vue前端获取视频流播放"><a href="#vue前端获取视频流播放" class="headerlink" title="vue前端获取视频流播放"></a>vue前端获取视频流播放</h1><h1 id="解决vue和flask端口不一的跨域问题"><a href="#解决vue和flask端口不一的跨域问题" class="headerlink" title="解决vue和flask端口不一的跨域问题"></a>解决vue和flask端口不一的跨域问题</h1><p>前端使用axios</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install axios<br></code></pre></td></tr></table></figure><p>然后在vue项目中的main.js配置axios</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$axios</span> = axios<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>python</tag>
      
      <tag>视频流</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
